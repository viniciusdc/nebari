{
  "$defs": {
    "CICD": {
      "additionalProperties": false,
      "properties": {
        "type": {
          "allOf": [
            {
              "$ref": "#/$defs/CiEnum"
            }
          ],
          "default": "none",
          "description": "Specifies the CI/CD provider that is used to automate the deployment of your infrastructure.\nThis enumeration can include options such as GitHub Actions, GitLab CI, Jenkins, etc.\n\nValid options include:\n- 'github-actions'\n- 'gitlab-ci'\n- 'none'\n\nThe default is 'none', indicating that no automation is used unless\nspecified."
        },
        "branch": {
          "default": "main",
          "description": "Defines the version control branch that CI/CD operations should track and use for deployments.\nThe default branch is set to 'main'. This setting is crucial for aligning the CI/CD processes with the correct codebase state.",
          "title": "Branch",
          "type": "string"
        },
        "commit_render": {
          "default": true,
          "description": "Determines whether the CI/CD process should automatically commit rendered configuration files or outputs back into the repository.\nThis boolean flag defaults to True, enabling automatic commits to ensure that all changes are version-controlled.",
          "title": "Commit Render",
          "type": "boolean"
        },
        "before_script": {
          "default": [],
          "description": "A list of scripts or commands that are executed prior to the main CI/CD pipeline actions.\nThis can include setup scripts, pre-deployment checks, or any preparatory tasks that need to be completed before the main deployment process begins.",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "title": "Before Script",
          "type": "array"
        },
        "after_script": {
          "default": [],
          "description": "A list of scripts or commands that are run after the main CI/CD pipeline actions have completed.\nThis might include cleanup operations, notification sending, or other follow-up actions necessary to finalize the deployment process.",
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "title": "After Script",
          "type": "array"
        }
      },
      "title": "CICD",
      "type": "object"
    },
    "CiEnum": {
      "enum": [
        "github-actions",
        "gitlab-ci",
        "none"
      ],
      "title": "CiEnum",
      "type": "string"
    },
    "ProviderEnum": {
      "enum": [
        "local",
        "existing",
        "do",
        "aws",
        "gcp",
        "azure"
      ],
      "title": "ProviderEnum",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "properties": {
    "ci_cd": {
      "allOf": [
        {
          "$ref": "#/$defs/CICD"
        }
      ],
      "default": {
        "after_script": [],
        "before_script": [],
        "branch": "main",
        "commit_render": true,
        "type": "none"
      }
    },
    "project_name": {
      "description": "Determines the base name for all major infrastructure related resources on\nNebari. Should be compatible with the Cloud provider's naming conventions.\nSee [Project Naming\nConventions](/docs/explanations/config-best-practices#naming-conventions)\nfor more details.",
      "pattern": "^[A-Za-z][A-Za-z0-9\\-_]{1,14}[A-Za-z0-9]$",
      "title": "Project Name",
      "type": "string"
    },
    "namespace": {
      "default": "dev",
      "description": "Used in combination with `project_name` to label infrastructure related\nresources on Nebari and also determines the target\n[namespace](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)\nused when deploying kubernetes resources. Defaults to `dev`.",
      "pattern": "^[A-Za-z][A-Za-z\\-_]*[A-Za-z]$",
      "title": "Namespace",
      "type": "string"
    },
    "provider": {
      "allOf": [
        {
          "$ref": "#/$defs/ProviderEnum"
        }
      ],
      "default": "local",
      "description": "Determines the cloud provider used to deploy infrastructure related\nresources on Nebari.\n\nOptions include:\n- `local`,\n- `existing`,\n- `do`,\n- `aws`,\n- `gcp`,\n- `azure`\n\nFor more information on the different providers, see [Nebari Deployment\nPlatforms](/docs/get-started/deploy). Defaults to `local`."
    },
    "nebari_version": {
      "default": "2024.4.2.dev11+g0f18c614.d20240506",
      "description": "The current installed version of Nebari. This is used to determine if the\nschema's version, the user must run `nebari upgrade` to ensure\ncompatibility.",
      "title": "Nebari Version",
      "type": "string"
    },
    "prevent_deploy": {
      "default": false,
      "description": "Controls whether deployment is blocked post-upgrade. Setting this field to\n'True' helps ensure that users do not inadvertently redeploy without being\naware of necessary configurations and updates, thus safeguarding the\nstability and integrity of the deployment. Defaults to 'False'.",
      "title": "Prevent Deploy",
      "type": "boolean"
    }
  },
  "required": [
    "project_name"
  ],
  "title": "ConfigSchema",
  "type": "object"
}
