render-qhub:
  image: "python:3.9"
  variables:
    COMMIT_MSG: |
      qhub-config.yaml automated commit: {{ '$CI_COMMIT_SHA' }}
  script:
    - pip install qhub==0.3.0
    - qhub deploy --config qhub-config.yaml
    - git config user.email "qhub@quansight.com"
    - git config user.name "gitlab ci"
    - git add .
    - git diff --quiet && git diff --staged --quiet || (git commit -m "${COMMIT_MSG}"; git push origin master)
  only:
    refs:
      - master
    changes:
      - "qhub-config.yaml"

build-docker-images:
  services:
    - docker:dind
  image: "docker:19.03.12"
  timeout: 2h
  parallel:
    matrix:
      - DOCKERFILE:
          - jupyterlab
          - jupyterhub
          - dask-worker
  variables:
    IMAGE_TAG: {{ '$CI_COMMIT_SHA' }}
    IMAGE_NAME: {{ cookiecutter.project_name }}-{{ '$DOCKERFILE' }}
  script:
    - docker build -f "image/Dockerfile.{{ '$DOCKERFILE' }}" -t "$IMAGE_NAME:$IMAGE_TAG" image
  only:
    refs:
      - merge_requests
    variables:
      - $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"
    changes:
      - "image/**"

terraform-jupyterhub:
  image:
    name: "hashicorp/terraform"
    entrypoint: [""]
  variables: 
    WORKSPACE: '/infrastructure'
    GITLAB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
{%- if cookiecutter.prefect is true %}
{% raw %}
    ARGS: '-var="prefect_token=${{ secrets.PREFECT_TOKEN }}"'
{% endraw %}
{% elif cookiecutter.prefect is false %}
    ARGS: []
{%- endif %}
{% if cookiecutter.provider == 'aws' %}
{% raw %}
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
{% endraw %}
{% elif cookiecutter.provider == 'do' %}
{% raw %}
    AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
    SPACES_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
    SPACES_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
    DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
{% endraw %}
{% elif cookiecutter.provider == 'gcp' %}
{% raw %}
    GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
{% endraw %}
{% elif cookiecutter.provider == 'azure' %}
{% raw %}
    ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
    ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
    ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
{% endraw %}
{% endif %}

  before_script:
    - terraform version

  script: |
    terraform fmt ${WORKSPACE}
    terraform init ${WORKSPACE}
    terraform validate ${WORKSPACE}
    terraform plan ${VARS} ${WORKSPACE}
    terraform apply ${VARS} ${WORKSPACE}

  only:
    refs:
      - master
    changes:
      - "infrastructure/**" 
      - "environments/**"

qhub-build-dockerfiles:
  services:
    - docker:dind
  parallel:
    matrix:
      - DOCKERFILE:
          - jupyterlab
          - jupyterhub
          - dask-worker
{% if cookiecutter.provider == "aws" %}
  image:
    name: amazon/aws-cli
    entrypoint: [""]

  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_IMAGE_NAME: {{ cookiecutter.project_name }}-{{ '$DOCKERFILE' }}
    IMAGE_TAG: {{ '$CI_COMMIT_SHA' }}
    AWS_ACCESS_KEY_ID: '${{ secrets.AWS_ACCESS_KEY_ID }}'
    AWS_SECRET_ACCESS_KEY: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
    AWS_DEFAULT_REGION: '${{ secrets.AWS_DEFAULT_REGION }}'
  
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version

  script:
    - yum -y install jq
    - export ACCOUNT_ID=$( aws sts get-caller-identity | jq -r '.Account' ) 
    - export ECR_REGISTRY=$ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
    - export IMAGE_NAME=$ECR_REGISTRY/$DOCKER_IMAGE_NAME
    - docker build -f "image/Dockerfile.$DOCKERFILE" -t $IMAGE_NAME:$IMAGE_TAG image
    - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker logout "$ECR_REGISTRY"
{% elif cookiecutter.provider == "gcp" %}
  image:
    name: google/cloud-sdk

  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_IMAGE_NAME: {{ cookiecutter.project_name }}/qhub-{{ '$DOCKERFILE' }}
    IMAGE_TAG: {{ '$CI_COMMIT_SHA' }}
    PROJECT_ID: {{ '${{ secrets.PROJECT_ID }}' }}
    GCP_CREDENTIALS: {{ '${{ secrets.GCP_CREDENTIALS }}' }}


  before_script:
    - docker --version
    - export GOOGLE_CREDENTIALS=$(echo $GCP_CREDENTIALS | base64 -d)
    - echo "$GOOGLE_CREDENTIALS" > /tmp/service-account.json
    - gcloud auth activate-service-account --key-file=/tmp/service-account.json

  script:
    - gcloud auth configure-docker
    - export IMAGE_NAME="gcr.io/$PROJECT_ID/$DOCKER_IMAGE_NAME"
    - docker build -f "image/Dockerfile.$DOCKERFILE" -t $IMAGE_NAME:$IMAGE_TAG image
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker logout
{% elif cookiecutter.provider == "azure" %}
  image:
    name: microsoft/azure-cli

  variables:
    DOCKER_HOST: tcp://docker:2375
    IMAGE_NAME: azureqhubdev.azurecr.io/qhub-{{ '$DOCKERFILE' }}
    IMAGE_TAG: {{ '$CI_COMMIT_SHA' }}
    LOGIN_SERVER: {{ cookiecutter.project_name }}.azurecr.io
    AZURE_USER: {{ '${{ secrets.ARM_CLIENT_ID }}' }}
    AZURE_PASS: {{ '${{ secrets.ARM_CLIENT_SECRET }}' }}


  before_script:
    - docker --version

  script:
    - docker login $LOGIN_SERVER --username $AZURE_USER --password $AZURE_PASS
    - docker build -f "image/Dockerfile.$DOCKERFILE" -t $IMAGE_NAME:$IMAGE_TAG image
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker logout
{% elif cookiecutter.provider == "do" %}
  image:
    name: docker:latest

  variables:
    IMAGE_NAME: registry.digitalocean.com/{{ cookiecutter.project_name }}/qhub-{{ '$DOCKERFILE' }}
    IMAGE_TAG: {{ '$CI_COMMIT_SHA' }}
    DIGITALOCEAN_ACCESS_TOKEN: {{ '${{ secrets.DIGITALOCEAN_TOKEN }}' }}

  before_script:
    - docker --version
    - apk update
    - apk upgrade
    - apk add doctl --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing

  script:
    - doctl auth init --access-token $DIGITALOCEAN_ACCESS_TOKEN
    - doctl registry login
    - docker build -f "image/Dockerfile.$DOCKERFILE" -t $IMAGE_NAME:$IMAGE_TAG image
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker logout
{% endif %}
  only:
    refs:
      - master
    changes:
      - "image/**"





